ADD r1, r2, r1
OUT R1

# # Load values into registers
# LH R1, 5       # Load value at memory[5] into R1 (e.g., assume memory[5] contains 0b0000000000001010 = 10)
# LH R2, 6       # Load value at memory[6] into R2 (e.g., assume memory[6] contains 0b0000000000000111 = 7)
# 
# # Perform addition
# ADD R3, R1, R2 # R3 = R1 + R2 (10 + 7 = 17)
# 
# # Output the result of addition
# OUT R3         # Output the value of R3 (expected: 17)
# 
# # Perform XOR
# LH R4, 7       # Load value at memory[7] into R4 (e.g., assume memory[7] contains 0b0000000000001100 = 12)
# XOR R5, R1, R4 # R5 = R1 XOR R4 (10 XOR 12 = 6)
# 
# # Output the result of XOR
# OUT R5         # Output the value of R5 (expected: 6)
# 
# # Perform logical shift left
# LSL R6, R1, 1  # R6 = R1 << 1 (10 << 1 = 20)
# 
# # Output the result of LSL
# OUT R6         # Output the value of R6 (expected: 20)
# 
# # Perform logical shift right
# LSR R7, R2, 2  # R7 = R2 >> 2 (7 >> 2 = 1)
# 
# # Output the result of LSR
# OUT R7         # Output the value of R7 (expected: 1)
